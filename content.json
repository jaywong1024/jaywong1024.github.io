{"pages":[{"title":"Friendly links","text":"Describe Url 从零开始学日语的视频教程，我已经看完了初级，感觉教程非常好，推荐给大家。 https://www.bilibili.com/video/BV1Bp4y1D747","link":"/links/index.html"},{"title":"About me","text":"Full stack programmer with 5 years of experience: Type List Language Java, SQL, Html, Css, Javascript, Shell, Python Database MySQL, Oracle, PostgreSQL, Redis, MongoDB Framework Backend SpringBoot, SpringMVC, SpringJPA, SpringCloud, OpenFeign, MyBatis, Redission, JUnit, Log4J, Hutool, ElasticSearch, ShardingJDBC, RocketMQ, MinIO, Canal, Seata, Nacos … Framework Frontend Webpack, React, Vue, ElementUI, MaterialUI, ECharts DevOps Kubernates, Docker, AWS, GCP, Alibaba Cloud, Gitlab CI/CD, ELK, Prometheus Development Tool Git, JMeter, Arthas, Maven, Jira, IDEA, VSCode Document Markdown, Draw, XMind, Notion, Word, Excel, PDF, PPT A new photographer: Describe Url Camera Sony Alpha 7 III","link":"/about/index.html"}],"posts":[{"title":"React 基礎復習（TODO）","text":"一、開発環境の構築 https://nodejs.org/en から Node.js をインストールします。 npm install -g create-react-app で create-react-app をインストールします。 12345678910111213141516171819# node verJayWongdeMacBook-Pro:React jay$ node -vv21.6.0# create-react-app verJayWongdeMacBook-Pro:React jay$ create-react-app -V5.0.1# clean cacheJayWongdeMacBook-Pro:React jay$ sudo npm cache clean --forcePassword:npm warn using --force Recommended protections disabled.# create app by create-react-appJayWongdeMacBook-Pro:React jay$ npx create-react-app jay-react-app# wait...We suggest that you begin by typing: cd jay-react-app npm startHappy hacking! 指示通りに cd jay-react-app &amp;&amp; npm start を実行すると、以下の画面が表示されます。 ブラウザで http://localhost:3000 を開くと成功画面が表示され、簡単な React アプリが完成します。 二、基本使用2.1 ディレクトリ構造public フォルダには静的リソースが含まれ、ソースコードは主に src フォルダに配置されます。 2.2 エントリーファイル index.js12345678910111213141516171819// 1.React と ReactDOM ライブラリをインポートimport React from 'react';import ReactDOM from 'react-dom/client';import './index.css';import App from './App';import reportWebVitals from './reportWebVitals';// 2.ReactDOM.createRoot で ReactDOM インスタンスを作成const root = ReactDOM.createRoot(document.getElementById('root'));// 3.render メソッドでルートコンポーネントをレンダリングroot.render( // 4.React.StrictMode は開発モードでの厳密チェック用 &lt;React.StrictMode&gt; &lt;App /&gt; &lt;/React.StrictMode&gt;);// パフォーマンス測定用（必要に応じて使用）reportWebVitals(); 2.3 ルートコンポーネントファイル App.js123456789101112131415161718192021import logo from './logo.svg';import './App.css';// 1.関数コンポーネント App を定義function App() { // 2.JSX を使用して UI を記述 return ( &lt;&gt; &lt;div className=\"App\"&gt; &lt;header className=\"App-header\"&gt; {/* JSX ではタグを閉じる必要があります */} &lt;img src={logo} className=\"App-logo\" alt=\"logo\" /&gt; React 復習 &lt;/header&gt; &lt;/div&gt; &lt;/&gt; );}// 3.コンポーネントをエクスポートexport default App; 2.4 ルートスタイルファイル App.css1234567891011121314151617181920212223242526272829303132333435363738.App { text-align: center;}.App-logo { height: 40vmin; pointer-events: none;}@media (prefers-reduced-motion: no-preference) { .App-logo { animation: App-logo-spin infinite 20s linear; }}.App-header { background-color: #282c34; min-height: 100vh; display: flex; flex-direction: column; align-items: center; justify-content: center; font-size: calc(10px + 2vmin); color: white;}.App-link { color: #61dafb;}@keyframes App-logo-spin { from { transform: rotate(0deg); } to { transform: rotate(360deg); }} 2.5 実行結果 三、Props と State（使用頻度が高い）index.js と App.css を変更せずに、App.js を編集して Props と State を使用します。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758import { Fragment } from \"react\";import { useState } from \"react\";import './App.css';function App() { // 1.Props を使用してデータを渡す const divContent1 = 'Divの内容'; const divTitle1 = 'Divのタイトル'; // 2.条件レンダリング（Conditional Rendering） let flag = false; let divContent2 = flag ? &lt;p&gt;Flag is true&lt;/p&gt; : &lt;h2&gt;Flag is false&lt;/h2&gt;; // 3.リストレンダリング（List Rendering） const namesContent = [ { name: 'Jay', id: 1 }, { name: '高橋', id: 2 }, { name: '田中', id: 3 }, { name: '太郎', id: 4 } ].map(item =&gt; ( &lt;Fragment key={item.id}&gt; &lt;li&gt;{item.name}&lt;/li&gt; &lt;li&gt;----------&lt;/li&gt; &lt;/Fragment&gt; )); // 4.State を使用したイベント処理 const [data, setData] = useState({ name: 'Jay', year: 26 }); function handleClick1() { setData(prevData =&gt; ({ ...prevData, year: prevData.year + 1 })); } // 5.State を使用したリスト操作 const [list, setList] = useState([1, 2, 3, 4, 5, 6]); function handleClick2() { setList(list.filter(item =&gt; item % 2 === 0)); } return ( &lt;div className='App-header'&gt; &lt;div title={divTitle1}&gt;{divContent1}&lt;/div&gt; &lt;div&gt;{divContent2}&lt;/div&gt; &lt;ul&gt;{namesContent}&lt;/ul&gt; &lt;p&gt;{data.name}:{data.year}&lt;/p&gt; &lt;div&gt; &lt;button onClick={handleClick1}&gt;ボタン1&lt;/button&gt; &lt;/div&gt; &lt;p&gt;num:&lt;/p&gt; &lt;ul&gt;{list.map(item =&gt; (&lt;li key={item}&gt;{item}&lt;/li&gt;))}&lt;/ul&gt; &lt;button onClick={handleClick2}&gt;ボタン2&lt;/button&gt; &lt;/div&gt; );}export default App; 結果は以下の通りです。","link":"/2025/05/17/%20React/React%20%E5%9F%BA%E7%A4%8E%E5%BE%A9%E7%BF%92/"}],"tags":[{"name":"React","slug":"React","link":"/tags/React/"}],"categories":[{"name":"React","slug":"React","link":"/categories/React/"}]}